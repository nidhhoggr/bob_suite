<?php
// $Id: usernews.module,v 1.3 2009/11/08 09:07:24 jerdiggity Exp $

/**
 * @file
 * Implements per-user news article publishing.
 */

/**
 * Implementation of hook_node_info().
 */
function usernews_node_info() {
  return array(
    'usernews' => array(
      'name' => t('User News'),
      'module' => 'usernews',
      'description' => t('Submit a news update, otherwise known as <em>user news</em>.'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function usernews_perm() {
  return array('create user news content', 'delete own user news content', 'delete any user news content', 'edit own user news content', 'edit any user news content');
}

/**
 * Implementation of hook_access().
 */
function usernews_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create user news content', $account) && $account->uid ? TRUE : NULL;
    case 'update':
      return user_access('edit any user news content', $account) || (user_access('edit own user news content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
    case 'delete':
      return user_access('delete any user news content', $account) || (user_access('delete own user news content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}

/**
 * Implementation of hook_user().
 */
function usernews_user($type, &$edit, &$user) {
  if ($type == 'view' && user_access('create user news content', $user)) {
    $user->content['summary']['usernews'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('News by !name', array('!name' => $user->name)),
      '#value' => l(t('All news articles by @name', array('@name' => $user->name)), "usernews/$user->uid", array('attributes' => array('title' => t("@username's news articles.", array('@username' => $user->name))))),
      '#attributes' => array('class' => 'usernews'),
	  '#weight' => -10,
    );
  }
}

/**
 * Implementation of hook_form().
 */
function usernews_form(&$node) {
  global $nid;
  $iid = isset($_GET['iid']) ? (int)$_GET['iid'] : 0;
  $type = node_get_types('type', $node);


  if (empty($node->body)) {
    if ($nid && $usernews = node_load($nid)) {
      $node->body = '<em>'. $usernews->body .'</em> ['. l($usernews->name, "node/$nid") .']';
    }

    if ($iid && $item = db_fetch_object(db_query('SELECT i.*, f.title as ftitle, f.link as flink FROM {aggregator_item} i, {aggregator_feed} f WHERE i.iid = %d AND i.fid = f.fid', $iid))) {
      $node->title = $item->title;
      $node->body = '<a href="'. check_url($item->link) .'">'. check_plain($item->title) .'</a> - <em>'. $item->description .'</em> [<a href="'. check_url($item->flink) .'">'. check_plain($item->ftitle) ."</a>]\n";
    }

  }

  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#required' => TRUE, '#default_value' => !empty($node->title) ? $node->title : NULL, '#weight' => -5);
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  return $form;
}

/**
 * Implementation of hook_view().
 */
function usernews_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('News articles'), 'usernews'), t('@date', array('@date' => format_date($node->created, 'custom', 'd M Y'))), l(t('@newstitle', array('@newstitle' => $node->title)), 'usernews/'. $node->uid)));
  }
  return node_prepare($node, $teaser);
}

/**
 * Implementation of hook_link().
 */
function usernews_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && $node->type == 'usernews') {
    if (arg(0) != 'usernews' || arg(1) != $node->uid) {
      $links['usernews_usernames_article'] = array(
        'title' => t('All articles by !name', array('!name' => $node->name)),
        'href' => "usernews/$node->uid",
        'attributes' => array('title' => t("All news articles by @user.", array('@user' => $node->name)))
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_menu().
 */
function usernews_menu() {
  $items['usernews'] = array(
    'title' => 'News articles',
    'page callback' => 'usernews_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'usernews.pages.inc',
  );
  $items['usernews/%user_uid_optional'] = array(
    'title' => 'My news articles',
    'page callback' => 'usernews_page_user',
    'page arguments' => array(1),
    'access callback' => 'usernews_page_user_access',
    'access arguments' => array(1),
    'file' => 'usernews.pages.inc',
  );
  $items['usernews/%user/feed'] = array(
    'title' => 'News articles',
    'page callback' => 'usernews_feed_user',
    'page arguments' => array(1),
    'access callback' => 'usernews_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'usernews.pages.inc',
  );
  $items['usernews/feed'] = array(
    'title' => 'News articles',
    'page callback' => 'usernews_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'usernews.pages.inc',
  );

  return $items;
}

/**
 * Access control for user news.
 */
function usernews_page_user_access($account) {
  return $account->uid && user_access('access content') && (user_access('create user news content', $account) || _usernews_post_exists($account));
}

function _usernews_post_exists($account) {
  return (bool)db_result(db_query_range(db_rewrite_sql("SELECT 1 FROM {node} n WHERE n.type = 'usernews' AND n.uid = %d AND n.status = 1"), $account->uid, 0, 1));
}

/**
 * Implementation of hook_block().
 */
function usernews_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  switch ($op) {
  case 'list':
    $block[0]['info'] = t('User News - latest articles');
    return $block;

  case 'configure':
  if ($delta == 0) {
    $form['usernews_block_num_posts'] = array( 
      '#type' => 'textfield', 
      '#title' => t('Number of user news articles to display'), 
      '#default_value' => variable_get('usernews_block_num_posts', 5), 
    );
  }
  return $form;

  case 'save':
    variable_set('usernews_block_num_posts', 
      (int) $edit['usernews_block_num_posts']);
    break;

  case 'view':
  if (user_access('access content')) {
    $num_posts = variable_get('usernews_block_num_posts', 5);
    $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.created FROM {node} n WHERE n.type = 'usernews' AND n.status = 1 ORDER BY n.created DESC"), 0, $num_posts);
      if ($node_title_list = node_title_list($result)) {
        $block['content'] = $node_title_list;
        $block['content'] .= theme('more_link', url('usernews'), t('More | @site', array('@site' => variable_get('site_name', 'Drupal'))));
        $block['subject'] = t('Latest news articles');
        return $block;
      }
    }
  }
}
